---
# Install Jenkins
- name: Install Jenkins prerequisits
  apt: pkg=python-pycurl state=installed

- name: Add Jenkins apt repository key
  apt_key:
    url=http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key
    state=present

- name: Add Jenkins apt repository
  apt_repository:
    repo='deb http://pkg.jenkins-ci.org/debian-stable binary/'
    state=present
    update_cache=yes

- name: Install Jenkins
  apt: pkg=jenkins state=installed

- name: Configure Jenkins user home directory
  user: name=jenkins home=/var/lib/jenkins

- name: Start Jenkins
  shell: /etc/init.d/jenkins start

- name: Wait for Jenkins to start up before proceeding
  shell: "curl -D - --silent http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 5
  delay: 60
  changed_when: false

- name: Create jenkins.model.JenkinsLocationConfiguration.xml
  template:
    src=../etc/jenkins.model.JenkinsLocationConfiguration.xml
    dest=/var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml
    owner={{jenkins_user}}
    group={{jenkins_user}}

- name: Configure admin email address
  xml:
    file: /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml
    xpath: /jenkins.model.JenkinsLocationConfiguration/adminAddress
    value: "{{jenkins_admin_email_address}}"
  notify: restart jenkins

- name: Configure Jenkins URL
  xml:
    file: /var/lib/jenkins/jenkins.model.JenkinsLocationConfiguration.xml
    xpath: /jenkins.model.JenkinsLocationConfiguration/jenkinsUrl
    value: "{{jenkins_url}}"
  notify: restart jenkins

- name: Create Jenkins config.xml
  template:
    src=../etc/config.xml
    dest=/var/lib/jenkins/config.xml
    owner={{jenkins_user}}
    group={{jenkins_user}}

- name: Configure number of executors
  xml:
    file: /var/lib/jenkins/config.xml
    xpath: /hudson/numExecutors
    value: "{{ jenkins_number_of_executors }}"
  notify: restart jenkins

- name: Create Mailer Configuration File
  template:
    src=../etc/hudson.tasks.Mailer.xml
    dest=/var/lib/jenkins/hudson.tasks.Mailer.xml
    owner={{jenkins_user}}
    group={{jenkins_user}}

- name: Configure mailer default suffix
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/defaultSuffix
    value: "{{jenkins_mailer_default_suffix}}"
  notify: restart jenkins

#- name: Configure mailer smtp auth username
#  xml:
#    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
#    xpath: /hudson.tasks.Mailer_-DescriptorImpl/smtpAuthUsername
#    value: "{{jenkins_mailer_smtp_auth_username}}"
#  notify: restart jenkins

#- name: Configure mailer smtp auth password
#  xml:
#    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
#    xpath: /hudson.tasks.Mailer_-DescriptorImpl/smtpAuthPassword
#    value: "{{jenkins_mailer_smtp_auth_password}}"
#  notify: restart jenkins

- name: Configure mailer reply to address
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/replyToAddress
    value: "{{jenkins_mailer_reply_to_address}}"
  notify: restart jenkins

- name: Configure mailer smtp host
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/smtpHost
    value: "{{jenkins_mailer_smtp_host}}"
  notify: restart jenkins

- name: Configure mailer smtp use ssl
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/useSsl
    value: "{{jenkins_mailer_use_ssl}}"
  notify: restart jenkins

- name: Configure mailer smtp port
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/smtpPort
    value: "{{jenkins_mailer_smtp_port}}"
  notify: restart jenkins

- name: Configure mailer charset
  xml:
    file: /var/lib/jenkins/hudson.tasks.Mailer.xml
    xpath: /hudson.tasks.Mailer_-DescriptorImpl/charset
    value: "{{jenkins_mailer_charset}}"
  notify: restart jenkins

# Theme
- name: Create org.codefirst.SimpleThemeDecorator.xml
  template:
    src=../etc/org.codefirst.SimpleThemeDecorator.xml
    dest=/var/lib/jenkins/org.codefirst.SimpleThemeDecorator.xml
    owner={{jenkins_user}}
    group={{jenkins_user}}

# Jenkins CLI
- name: Get the jenkins-cli jarfile from the Jenkins server
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10

# Jenkins Plugins
# - name: Create Jenkins updates folder.
#   file:
#     path: /var/lib/jenkins/updates
#     owner: jenkins
#     group: jenkins
#     mode: 0755
#     state: directory

#    - name: Update Jenkins plugin data.
#      shell: >
#        curl -L https://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > /var/lib/jenkins/updates/default.json
#        creates=/var/lib/jenkins/updates/default.json

#    - name: Permissions for default.json updates info.
#      file:
#        path: /var/lib/jenkins/updates/default.json
#        owner: jenkins
#        group: jenkins
#        mode: 0755

# geerlingguy approach
#- name: Install Jenkins plugins.
#  command: >
#    java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/ install-plugin {{ item }}
#    creates=/var/lib/jenkins/plugins/{{ item }}.jpi
#  with_items: jenkins_plugins
#  notify: restart jenkins

# icto approach
# - name: Install/update plugins
#   shell: java -jar {{ jenkins_jar_location }} -s http://localhost:{{ jenkins_http_port }}{{ jenkins_url_prefix }} install-plugin {{ item }}
#   with_items: jenkins_plugins
#   ignore_errors: yes
#   notify:
#     - 'restart jenkins'

- name: Wait for Jenkins to start up before proceeding
  shell: "curl -D - --silent http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}/cli/"
  register: result
  until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: 5
  delay: 60
  changed_when: false

- name: Install Jenkins Plugins
  shell: java -jar /var/lib/jenkins/jenkins-cli.jar -s http://localhost:8080/ install-plugin {{item}}
  with_items: jenkins_plugins

- name: Restart Jenkins
  shell: java -jar /var/lib/jenkins/jenkins-cli.jar -s http://localhost:8080 safe-restart

#    - name: Configure security
#      xml:
#        file: /var/lib/jenkins/.jenkins/config.xml
#        xpath: /hudson/securityRealm
#        attribute: class
#        value: "hudson.security.HudsonPrivateSecurityRealm"

# - name: Create Jenkins admin user
#   shell: echo 'jenkins.model.Jenkins.instance.securityRealm.createAccount({{ jenkins_username }}, {{ jenkins_password }})' | java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix | default('') }}/ groovy =

# Jenkins Jobs
- name: Install PIP
  apt: pkg=python-pip state=installed
- name: Install Jenkins Job Builder
  pip: name=jenkins-job-builder

- name: Test Jenkins Job Builder Pipeline
  shell: jenkins-jobs test ../pipeline.yaml

- name: Run Jenkins Job Builder Pipeline
  shell: jenkins-jobs --conf ../etc/jenkins.ini.in update ../pipeline.yaml
